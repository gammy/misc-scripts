#!/bin/bash
# mehcommits by gammy: The poor man's lolcommits (for linux)
#                      No need for any rubies or gems!
#
# Usage: Place this script in your PATH and run it in a git repo.
#        To set it as a post-commit hook for automatically shooting you when
#        you make a commit, just 'mehcommits install' in the repository.
#
# Depends on: see $deps below

workdir="$HOME/.mehcommits"
 tmpdir="$workdir/.tmp"
  vid_w=640
  vid_h=480
vid_dev="/dev/video0"
vid_drv="v4l2" # Leeeeenuks
  delay=0      # No delay (takes ages with multiple frames anyway)
 frames=4      # We use the last frame: Some (most) cams need some grace time

# Dependency checking
deps=(git mplayer convert identify grep sort cut basename)
count=0

for dep in ${deps[*]}; do
	if [ ! $(which $dep) ]; then
		echo "Missing dependency: $dep"
		((count++))
	fi
done

if [ $count -ne 0 ]; then
	echo "$count dependencies not met"
	exit 1
fi

unset count

# Get the repo root path or bail out if we're not in a repo
gitroot=$(git rev-parse --show-toplevel) || exit $?
   repo=$(basename "$gitroot")

# Install post-commit hook if desired
# TODO uninstall/disable, but really, it's easy enough to delete it by hand
out_hook="$gitroot/.git/hooks/post-commit";

if [ "$1" = "install" ] || [ "$1" = "enable" ]; then
	cmd=$(basename $0)
	if [ -e "$out_hook" ]; then
		if [ $(grep -v '^#' "$out_hook" | grep "$cmd") ]; then
			echo "Mehcommits already seems installed "
		else
			echo "Appending post commit hook to existing hooks"
			echo "$cmd" >> "$out_hook"
		fi
	else
		echo "Creating new post commit hook"
		printf "%s\n%s\n" '#!/bin/sh' "$cmd" > "$out_hook"
	fi

	chmod +x "$out_hook"

	exit 0
elif [ "$1" = "uninstall" ] || [ "$1" = "disable" ]; then
	echo "Not implemented: edit \"$out_hook\" yourself"
	exit 1
fi

# Get commit info which we will annotate to the picture
msg=$(git log --pretty=oneline --abbrev-commit -1)
sha=$(echo "$msg" | cut -d ' ' -f 1)
msg=$(echo "$msg" | cut -d ' ' -f 2-)

# Create work paths
mkdir -p "$tmpdir" > /dev/null 2>&1
mkdir "$workdir/$repo" > /dev/null 2>&1

out_fin="$workdir/$repo/$sha.jpg"

if [ -e "$out_fin" ]; then
	echo "Mehcommit already exists for $sha: \"$out_fin\""
	exit 0
fi

echo "** Smile, you ugly fuck"!
sleep "$delay"

# Take the shot and store as pnm(ppm) to avoid compression
mplayer -tv driver=$vid_drv:device="$vid_dev":width=$vid_w:height=$vid_h \
	-vo pnm:outdir="$tmpdir" \
	-frames $frames \
	tv:// > /dev/null 2>&1

if [ ! $? ]; then
	echo "mplayer: abnormal exit $?, presumably failed to take a shot" >&2
	exit 1
fi

out_raw=$(ls "$tmpdir" | sort -n | tail -n1)

if [ -z "$out_raw" ]; then
	echo "No image was produced by mplayer, presumably failed to take a shot" >&2
	exit 1
fi

out_raw="$tmpdir/$out_raw"

## Annotate and convert (Thanks http://www.imagemagick.org/Usage/annotating/)
width=$(identify -format %w "$out_raw")

# Annotate sha on top right to an intermediate file
convert "$out_raw" \
	-pointsize 24 \
	-gravity northeast \
	-stroke '#000C' -strokewidth 2 -annotate 0 "$sha" \
	-stroke  none   -fill white    -annotate 0 "$sha" \
	"$tmpdir/intermediate.ppm"

if [ ! $? ]; then
	echo "convert (stage 1/2): abnormal exit $?" >&2
	exit 1
fi

if [ ! -e "$tmpdir/intermediate.ppm" ]; then
	echo "No intermediate image was produced by convert, something went wrong" >&2
	exit 1
fi

# Annotate message to final result. This doesn't look like I want it to:
# I don't want a transparent box, I just want the shadow just like I annotate
# the sha above, however I haven't figured out how to do this with "caption:"
# or "label:", which is required for word-wrapping. Note however that IM will 
# set pointsize so as to fit the specified rectangle, which is neat!
convert -background '#1006' \
	-fill white \
	-gravity center \
	-size ${width}x50 \
        caption:"$msg" \
        "$tmpdir/intermediate.ppm" \
	+swap \
	-gravity south \
	-composite \
	"$out_fin"

if [ ! $? ]; then
	echo "convert (stage 2/2): abnormal exit $?" >&2
	exit 1
fi

if [ ! -e "$out_fin" ]; then
	echo "No final image was produced by convert, something went wrong" >&2
	exit 1
fi

echo "-> $out_fin"

rm "$tmpdir/"*.ppm
