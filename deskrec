#!/bin/bash
# Really simple screen recorder
# Can also record audio to a separate file, if you've got pulseaudio
#
# Usage: 
# Run the script from a terminal and click on a window.
# If you use pulseaudio and want sound, use the --audio argument.
# To stop recording, hit 'q' in the terminal where deskrec is running.
#
# Hitting ^C during recording will remove the output file(s).
# Note that your computer might be too slow to record it at the desired rate!
#
# Tweaks: See the fps variable, or the bottom line where ffmpeg is executed.
#
# Copyright (C) 2010-2013 Kristian Gunstone
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

fps=20
audio_mon="analog"
#audio_mon="hdmi"
#audio_mon="headset"

deps=(ffmpeg xwininfo grep cut awk sed basename mktemp)

if [ "$1" = "--audio" ]; then
       record_sound=1
       deps+=(parec sox)
fi

# Dependency checking
count=0

for dep in ${deps[*]}; do
	if [ ! $(which $dep) ]; then
		echo "Missing dependency: $dep";
		((count++))
	fi
done

if [ $count -ne 0 ]; then
	echo "$count dependencies not met."
	exit 1
fi

unset count

name=$(basename $0)
name=${name//[^aA-zZ]/}
tmp=$(mktemp -t "$name-XXXXXX")
unset name

echo -e "\nClick on the desired window. Its initial geometry is the area being captured.\n"
echo "'q' quits and prints the dst file."
echo "^C will CANCEL and REMOVE the dst."

# Run xwininfo to grab window
xwininfo > $tmp

# Grab id and name (Although we don't need id anymore!)
idname=$(grep "Window id" $tmp | cut -d : -f 3)
id=$(echo $idname | awk '{print $1}')
name=$(echo $idname | cut -d ' ' -f 2- | tr -d \")
unset idname

# Grab width, height
 width=$(grep "Width:" $tmp | awk '{print $2}')
height=$(grep "Height:" $tmp | awk '{print $2}')

# Grab offsets
offsx=$(grep "Absolute upper-left X:" ${tmp} | awk '{print $4}')
offsy=$(grep "Absolute upper-left Y:" ${tmp} | awk '{print $4}')

rm -f $tmp

dims=${width}x${height}

echo -e "\nGeometry for \"${name}\" (${id}) is ${dims}+${offsx}+${offsy}."

# Not the prettiest, is it :[
name=$(echo "$name" | sed 's/[^a-zA-Z]/_/g' | tr -s _  | sed 's/^_//' | sed 's/_$//')
[ -z "$name" ] && name="noname"
dst_tpl=$(mktemp -u "$name-XXXXXX")
dst="$dst_tpl.mkv"

# Sound stuff (pulseaudio only)
dst_snd="$dst_tpl.wav"

if [ $record_sound ]; then
	# Get the name of the first-listed pulseaudio monitor matching $audio_mon
	pa_mon=$(pacmd list-sources | grep "\.monitor" | sed 's/.*<\(.*\)>/\1/g' | grep -i "$audio_mon" | head -n1)
	if [ -z "$pa_mon" ]; then
		echo "Can't find any pulseaudio monitor matching \"$audio_mon\", picking any first available monitor."
		# Get the name of the first-listed pulseaudio monitor
		pa_mon=$(pacmd list-sources | grep "\.monitor" | sed 's/.*<\(.*\)>/\1/g' | head -n1)
	fi

	if [ -z "$pa_mon" ]; then
		echo "Can't find any pulseaudio monitor to get audio from"!
		record_sound=
	else
		echo -e "Using audio from \"$pa_mon\".\n"
		echo "Launching parec."
		# Start recording in the background
		parec -d "$pa_mon" | sox -t raw -r 44k -e signed-integer -Lb 16 -c 2 -  "$dst_snd" &
		# Get process id of both sox and parec
		parec_pids="$! $(jobs -p)"
		# renice -n 20 -p ${parec_pids[0]}
		# renice -n 20 -p ${parec_pids[1]}
	fi
fi

echo -e "Launching ffmpeg.\n"

# See http://ffmpeg.org/trac/ffmpeg/wiki/x264EncodingGuide for encoding specifics
ffmpeg -loglevel panic \
       -f x11grab \
       -r $fps \
       -s $dims \
       -i :0.0+${offsx},${offsy} \
       -vcodec libx264 \
       -preset ultrafast \
       -crf 18 \
       -threads 0 \
       $dst \
&& {
	echo -e "\nFinished:" 
	du -sh "$dst"
	if [ $record_sound ]; then
		kill $parec_pids
		du -sh "$dst_snd"
	fi
} || { 
	rm -f $dst
	if [ $record_sound ]; then
		# For reasons I don't understand, these pids
		# are automatically killed if we reach this condition!
		# kill $parec_pids
		rm -f "$dst_snd"
	fi
}
