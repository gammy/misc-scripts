#!/bin/bash
# Cheap, Quake-terminal-like gvim (well, without any dropdown animation!)
# The first time this is run, it starts gvim with any arguments passed, 
# and sets a few window properties for fullscreening gvim. If called again
# and if gvim with $title is found, it toggles the 'hidden' property. 
#
# I myself bind this script to a keychain (Mod1 V) to toggle its visibility.
# If you want to hide the menubar and so on, then do that via gvim, ie
# gvim-quake --cmd "set guioptions-=m" --cmd "set guioptions-=T"

    title=gvimFS # May be 8 characters long
  crap_wm=0      # If your wm doesn't like the fullscreen property
is_sticky=1      # If you want gvim-quake to be on all desktops
tries_left=20    # gvim backgrounds immediately before creating an X window,
                 # so we need to wait for the window to appear before toggling 
                 # its properties. Fortunately we usually only do this if
                 # a gvim $title isn't already running.

deps=(gvim wmctrl xprop)
count=0

for dep in ${deps[*]}; do
	if ! which $dep > /dev/null 2>&1; then
		echo "Missing dependency: $dep" >2&1
		((count++))
	fi
done

if [ $count -ne 0 ]; then
	echo "Error: $count dependencies not met" >&2
	exit 1
fi

unset count
unset deps

if ps auxw 2>&1 | grep "$title" | grep -v grep > /dev/null; then
	wmctrl -r "$title" -b toggle,hidden
	exit $?
else
	gvim --cmd "set titlestring=$title" "$@" || exit $?

	until xprop -name "$title" > /dev/null 2>&1 || [ $tries_left -eq 0 ]; do
		sleep 0.1
		((tries_left--))
	done

	if [ $tries_left -eq 0 ]; then
		echo "Error: Can't find a \"$title\" X window" >&2
		exit 1
	fi

fi
	
[ $is_sticky ] && wmctrl -r "$title" -b toggle,sticky

if [ $crap_wm ]; then
	wmctrl -r "$title" -b toggle,maximized_vert,maximized_horz
	wmctrl -r "$title" -b toggle,above
else 
	wmctrl -r "$title" -b toggle,fullscreen
fi

